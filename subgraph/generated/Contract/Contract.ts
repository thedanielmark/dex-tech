// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokenMinted extends ethereum.Event {
  get params(): TokenMinted__Params {
    return new TokenMinted__Params(this);
  }
}

export class TokenMinted__Params {
  _event: TokenMinted;

  constructor(event: TokenMinted) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get customer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TraderTokenCreated extends ethereum.Event {
  get params(): TraderTokenCreated__Params {
    return new TraderTokenCreated__Params(this);
  }
}

export class TraderTokenCreated__Params {
  _event: TraderTokenCreated;

  constructor(event: TraderTokenCreated) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  checkTrader(trader: Address): boolean {
    let result = super.call("checkTrader", "checkTrader(address):(bool)", [
      ethereum.Value.fromAddress(trader)
    ]);

    return result[0].toBoolean();
  }

  try_checkTrader(trader: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("checkTrader", "checkTrader(address):(bool)", [
      ethereum.Value.fromAddress(trader)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createTraderToken(contractName: string, contractSymbol: string): Address {
    let result = super.call(
      "createTraderToken",
      "createTraderToken(string,string):(address)",
      [
        ethereum.Value.fromString(contractName),
        ethereum.Value.fromString(contractSymbol)
      ]
    );

    return result[0].toAddress();
  }

  try_createTraderToken(
    contractName: string,
    contractSymbol: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createTraderToken",
      "createTraderToken(string,string):(address)",
      [
        ethereum.Value.fromString(contractName),
        ethereum.Value.fromString(contractSymbol)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  customerTraders(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "customerTraders",
      "customerTraders(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_customerTraders(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "customerTraders",
      "customerTraders(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCustomerTraders(customer: Address): Array<Address> {
    let result = super.call(
      "getCustomerTraders",
      "getCustomerTraders(address):(address[])",
      [ethereum.Value.fromAddress(customer)]
    );

    return result[0].toAddressArray();
  }

  try_getCustomerTraders(
    customer: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCustomerTraders",
      "getCustomerTraders(address):(address[])",
      [ethereum.Value.fromAddress(customer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTraderContract(trader: Address): Address {
    let result = super.call(
      "getTraderContract",
      "getTraderContract(address):(address)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toAddress();
  }

  try_getTraderContract(trader: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTraderContract",
      "getTraderContract(address):(address)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUserTraders(user: Address): Array<Address> {
    let result = super.call(
      "getUserTraders",
      "getUserTraders(address):(address[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toAddressArray();
  }

  try_getUserTraders(user: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getUserTraders",
      "getUserTraders(address):(address[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  traderContracts(param0: Address): Address {
    let result = super.call(
      "traderContracts",
      "traderContracts(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_traderContracts(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "traderContracts",
      "traderContracts(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userTraders(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "userTraders",
      "userTraders(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_userTraders(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userTraders",
      "userTraders(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateTraderTokenCall extends ethereum.Call {
  get inputs(): CreateTraderTokenCall__Inputs {
    return new CreateTraderTokenCall__Inputs(this);
  }

  get outputs(): CreateTraderTokenCall__Outputs {
    return new CreateTraderTokenCall__Outputs(this);
  }
}

export class CreateTraderTokenCall__Inputs {
  _call: CreateTraderTokenCall;

  constructor(call: CreateTraderTokenCall) {
    this._call = call;
  }

  get contractName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get contractSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateTraderTokenCall__Outputs {
  _call: CreateTraderTokenCall;

  constructor(call: CreateTraderTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MintTokenForCustomerCall extends ethereum.Call {
  get inputs(): MintTokenForCustomerCall__Inputs {
    return new MintTokenForCustomerCall__Inputs(this);
  }

  get outputs(): MintTokenForCustomerCall__Outputs {
    return new MintTokenForCustomerCall__Outputs(this);
  }
}

export class MintTokenForCustomerCall__Inputs {
  _call: MintTokenForCustomerCall;

  constructor(call: MintTokenForCustomerCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get customer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get keyFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintTokenForCustomerCall__Outputs {
  _call: MintTokenForCustomerCall;

  constructor(call: MintTokenForCustomerCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}
